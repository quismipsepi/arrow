// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimestampMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsTimestampMetadata(buf []byte, offset flatbuffers.UOffsetT) *TimestampMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimestampMetadata{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TimestampMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimestampMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimestampMetadata) Unit() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimestampMetadata) MutateUnit(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

/// Timestamp data is assumed to be UTC, but the time zone is stored here for
/// presentation as localized
func (rcv *TimestampMetadata) Timezone() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp data is assumed to be UTC, but the time zone is stored here for
/// presentation as localized
func TimestampMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TimestampMetadataAddUnit(builder *flatbuffers.Builder, unit int8) {
	builder.PrependInt8Slot(0, unit, 0)
}
func TimestampMetadataAddTimezone(builder *flatbuffers.Builder, timezone flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(timezone), 0)
}
func TimestampMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
