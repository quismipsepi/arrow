// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "arrow_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// Array__from_vector
std::shared_ptr<arrow::Array> Array__from_vector(SEXP x);
RcppExport SEXP _arrow_Array__from_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__from_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__as_vector
SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__as_vector(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__as_vector(array));
    return rcpp_result_gen;
END_RCPP
}
// Array__Slice1
std::shared_ptr<arrow::Array> Array__Slice1(const std::shared_ptr<arrow::Array>& array, int offset);
RcppExport SEXP _arrow_Array__Slice1(SEXP arraySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Slice1(array, offset));
    return rcpp_result_gen;
END_RCPP
}
// Array__Slice2
std::shared_ptr<arrow::Array> Array__Slice2(const std::shared_ptr<arrow::Array>& array, int offset, int length);
RcppExport SEXP _arrow_Array__Slice2(SEXP arraySEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Slice2(array, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// Array__IsNull
bool Array__IsNull(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsNull(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__IsNull(x, i));
    return rcpp_result_gen;
END_RCPP
}
// Array__IsValid
bool Array__IsValid(const std::shared_ptr<arrow::Array>& x, int i);
RcppExport SEXP _arrow_Array__IsValid(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__IsValid(x, i));
    return rcpp_result_gen;
END_RCPP
}
// Array__length
int Array__length(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__length(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__offset
int Array__offset(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__offset(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__offset(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__null_count
int Array__null_count(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__null_count(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__null_count(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__type
std::shared_ptr<arrow::DataType> Array__type(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__type(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__ToString
std::string Array__ToString(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__ToString(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__ToString(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__type_id
arrow::Type::type Array__type_id(const std::shared_ptr<arrow::Array>& x);
RcppExport SEXP _arrow_Array__type_id(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__type_id(x));
    return rcpp_result_gen;
END_RCPP
}
// Array__Equals
bool Array__Equals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__Equals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Equals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// Array__ApproxEquals
bool Array__ApproxEquals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs);
RcppExport SEXP _arrow_Array__ApproxEquals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__ApproxEquals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// Array__data
std::shared_ptr<arrow::ArrayData> Array__data(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__data(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__data(array));
    return rcpp_result_gen;
END_RCPP
}
// Array__RangeEquals
bool Array__RangeEquals(const std::shared_ptr<arrow::Array>& self, const std::shared_ptr<arrow::Array>& other, int start_idx, int end_idx, int other_start_idx);
RcppExport SEXP _arrow_Array__RangeEquals(SEXP selfSEXP, SEXP otherSEXP, SEXP start_idxSEXP, SEXP end_idxSEXP, SEXP other_start_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type other(otherSEXP);
    Rcpp::traits::input_parameter< int >::type start_idx(start_idxSEXP);
    Rcpp::traits::input_parameter< int >::type end_idx(end_idxSEXP);
    Rcpp::traits::input_parameter< int >::type other_start_idx(other_start_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(Array__RangeEquals(self, other, start_idx, end_idx, other_start_idx));
    return rcpp_result_gen;
END_RCPP
}
// Array__Mask
LogicalVector Array__Mask(const std::shared_ptr<arrow::Array>& array);
RcppExport SEXP _arrow_Array__Mask(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(Array__Mask(array));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_type
std::shared_ptr<arrow::DataType> ArrayData__get_type(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_type(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_length
int ArrayData__get_length(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_length(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_null_count
int ArrayData__get_null_count(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_null_count(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_null_count(x));
    return rcpp_result_gen;
END_RCPP
}
// ArrayData__get_offset
int ArrayData__get_offset(const std::shared_ptr<arrow::ArrayData>& x);
RcppExport SEXP _arrow_ArrayData__get_offset(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ArrayData>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayData__get_offset(x));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__length
int ChunkedArray__length(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__length(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__length(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__null_count
int ChunkedArray__null_count(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__null_count(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__null_count(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__num_chunks
int ChunkedArray__num_chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__num_chunks(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__num_chunks(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__chunk
std::shared_ptr<arrow::Array> ChunkedArray__chunk(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int i);
RcppExport SEXP _arrow_ChunkedArray__chunk(SEXP chunked_arraySEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__chunk(chunked_array, i));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__chunks
List ChunkedArray__chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__chunks(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__chunks(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__type
std::shared_ptr<arrow::DataType> ChunkedArray__type(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__type(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__type(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__as_vector
SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);
RcppExport SEXP _arrow_ChunkedArray__as_vector(SEXP chunked_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__as_vector(chunked_array));
    return rcpp_result_gen;
END_RCPP
}
// ChunkArray__Slice1
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice1(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset);
RcppExport SEXP _arrow_ChunkArray__Slice1(SEXP chunked_arraySEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkArray__Slice1(chunked_array, offset));
    return rcpp_result_gen;
END_RCPP
}
// ChunkArray__Slice2
std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice2(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset, int length);
RcppExport SEXP _arrow_ChunkArray__Slice2(SEXP chunked_arraySEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkArray__Slice2(chunked_array, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// ChunkedArray__from_list
std::shared_ptr<arrow::ChunkedArray> ChunkedArray__from_list(List chunks);
RcppExport SEXP _arrow_ChunkedArray__from_list(SEXP chunksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chunks(chunksSEXP);
    rcpp_result_gen = Rcpp::wrap(ChunkedArray__from_list(chunks));
    return rcpp_result_gen;
END_RCPP
}
// Column__length
int Column__length(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__length(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__length(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__null_count
int Column__null_count(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__null_count(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__null_count(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__type
std::shared_ptr<arrow::DataType> Column__type(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__type(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__type(column));
    return rcpp_result_gen;
END_RCPP
}
// Column__data
std::shared_ptr<arrow::ChunkedArray> Column__data(const std::shared_ptr<arrow::Column>& column);
RcppExport SEXP _arrow_Column__data(SEXP columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Column>& >::type column(columnSEXP);
    rcpp_result_gen = Rcpp::wrap(Column__data(column));
    return rcpp_result_gen;
END_RCPP
}
// Int8__initialize
std::shared_ptr<arrow::DataType> Int8__initialize();
RcppExport SEXP _arrow_Int8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int16__initialize
std::shared_ptr<arrow::DataType> Int16__initialize();
RcppExport SEXP _arrow_Int16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int32__initialize
std::shared_ptr<arrow::DataType> Int32__initialize();
RcppExport SEXP _arrow_Int32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Int64__initialize
std::shared_ptr<arrow::DataType> Int64__initialize();
RcppExport SEXP _arrow_Int64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Int64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt8__initialize
std::shared_ptr<arrow::DataType> UInt8__initialize();
RcppExport SEXP _arrow_UInt8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt16__initialize
std::shared_ptr<arrow::DataType> UInt16__initialize();
RcppExport SEXP _arrow_UInt16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt32__initialize
std::shared_ptr<arrow::DataType> UInt32__initialize();
RcppExport SEXP _arrow_UInt32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// UInt64__initialize
std::shared_ptr<arrow::DataType> UInt64__initialize();
RcppExport SEXP _arrow_UInt64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(UInt64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float16__initialize
std::shared_ptr<arrow::DataType> Float16__initialize();
RcppExport SEXP _arrow_Float16__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float16__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float32__initialize
std::shared_ptr<arrow::DataType> Float32__initialize();
RcppExport SEXP _arrow_Float32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Float64__initialize
std::shared_ptr<arrow::DataType> Float64__initialize();
RcppExport SEXP _arrow_Float64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Float64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Boolean__initialize
std::shared_ptr<arrow::DataType> Boolean__initialize();
RcppExport SEXP _arrow_Boolean__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Boolean__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Utf8__initialize
std::shared_ptr<arrow::DataType> Utf8__initialize();
RcppExport SEXP _arrow_Utf8__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Utf8__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Date32__initialize
std::shared_ptr<arrow::DataType> Date32__initialize();
RcppExport SEXP _arrow_Date32__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Date32__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Date64__initialize
std::shared_ptr<arrow::DataType> Date64__initialize();
RcppExport SEXP _arrow_Date64__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Date64__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Null__initialize
std::shared_ptr<arrow::DataType> Null__initialize();
RcppExport SEXP _arrow_Null__initialize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Null__initialize());
    return rcpp_result_gen;
END_RCPP
}
// Decimal128Type__initialize
std::shared_ptr<arrow::DataType> Decimal128Type__initialize(int32_t precision, int32_t scale);
RcppExport SEXP _arrow_Decimal128Type__initialize(SEXP precisionSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< int32_t >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(Decimal128Type__initialize(precision, scale));
    return rcpp_result_gen;
END_RCPP
}
// FixedSizeBinary__initialize
std::shared_ptr<arrow::DataType> FixedSizeBinary__initialize(int32_t byte_width);
RcppExport SEXP _arrow_FixedSizeBinary__initialize(SEXP byte_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int32_t >::type byte_width(byte_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(FixedSizeBinary__initialize(byte_width));
    return rcpp_result_gen;
END_RCPP
}
// Timestamp__initialize1
std::shared_ptr<arrow::DataType> Timestamp__initialize1(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Timestamp__initialize1(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Timestamp__initialize1(unit));
    return rcpp_result_gen;
END_RCPP
}
// Timestamp__initialize2
std::shared_ptr<arrow::DataType> Timestamp__initialize2(arrow::TimeUnit::type unit, const std::string& timezone);
RcppExport SEXP _arrow_Timestamp__initialize2(SEXP unitSEXP, SEXP timezoneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type timezone(timezoneSEXP);
    rcpp_result_gen = Rcpp::wrap(Timestamp__initialize2(unit, timezone));
    return rcpp_result_gen;
END_RCPP
}
// Time32__initialize
std::shared_ptr<arrow::DataType> Time32__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time32__initialize(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Time32__initialize(unit));
    return rcpp_result_gen;
END_RCPP
}
// Time64__initialize
std::shared_ptr<arrow::DataType> Time64__initialize(arrow::TimeUnit::type unit);
RcppExport SEXP _arrow_Time64__initialize(SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arrow::TimeUnit::type >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Time64__initialize(unit));
    return rcpp_result_gen;
END_RCPP
}
// list__
SEXP list__(SEXP x);
RcppExport SEXP _arrow_list__(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(list__(x));
    return rcpp_result_gen;
END_RCPP
}
// struct_
std::shared_ptr<arrow::DataType> struct_(List fields);
RcppExport SEXP _arrow_struct_(SEXP fieldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fields(fieldsSEXP);
    rcpp_result_gen = Rcpp::wrap(struct_(fields));
    return rcpp_result_gen;
END_RCPP
}
// DataType__ToString
std::string DataType__ToString(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__ToString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__ToString(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__name
std::string DataType__name(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__name(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__name(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__Equals
bool DataType__Equals(const std::shared_ptr<arrow::DataType>& lhs, const std::shared_ptr<arrow::DataType>& rhs);
RcppExport SEXP _arrow_DataType__Equals(SEXP lhsSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__Equals(lhs, rhs));
    return rcpp_result_gen;
END_RCPP
}
// DataType__num_children
int DataType__num_children(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__num_children(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__num_children(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__children_pointer
List DataType__children_pointer(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__children_pointer(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__children_pointer(type));
    return rcpp_result_gen;
END_RCPP
}
// DataType__id
arrow::Type::type DataType__id(const std::shared_ptr<arrow::DataType>& type);
RcppExport SEXP _arrow_DataType__id(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DataType__id(type));
    return rcpp_result_gen;
END_RCPP
}
// schema_
std::shared_ptr<arrow::Schema> schema_(List fields);
RcppExport SEXP _arrow_schema_(SEXP fieldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fields(fieldsSEXP);
    rcpp_result_gen = Rcpp::wrap(schema_(fields));
    return rcpp_result_gen;
END_RCPP
}
// Schema__ToString
std::string Schema__ToString(const std::shared_ptr<arrow::Schema>& s);
RcppExport SEXP _arrow_Schema__ToString(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(Schema__ToString(s));
    return rcpp_result_gen;
END_RCPP
}
// ListType__ToString
std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type);
RcppExport SEXP _arrow_ListType__ToString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ListType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(ListType__ToString(type));
    return rcpp_result_gen;
END_RCPP
}
// FixedWidthType__bit_width
int FixedWidthType__bit_width(const std::shared_ptr<arrow::FixedWidthType>& type);
RcppExport SEXP _arrow_FixedWidthType__bit_width(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::FixedWidthType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(FixedWidthType__bit_width(type));
    return rcpp_result_gen;
END_RCPP
}
// DateType__unit
arrow::DateUnit DateType__unit(const std::shared_ptr<arrow::DateType>& type);
RcppExport SEXP _arrow_DateType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DateType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DateType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// TimeType__unit
arrow::TimeUnit::type TimeType__unit(const std::shared_ptr<arrow::TimeType>& type);
RcppExport SEXP _arrow_TimeType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimeType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimeType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// DecimalType__precision
int32_t DecimalType__precision(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__precision(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DecimalType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DecimalType__precision(type));
    return rcpp_result_gen;
END_RCPP
}
// DecimalType__scale
int32_t DecimalType__scale(const std::shared_ptr<arrow::DecimalType>& type);
RcppExport SEXP _arrow_DecimalType__scale(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DecimalType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DecimalType__scale(type));
    return rcpp_result_gen;
END_RCPP
}
// TimestampType__timezone
std::string TimestampType__timezone(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__timezone(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimestampType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimestampType__timezone(type));
    return rcpp_result_gen;
END_RCPP
}
// TimestampType__unit
arrow::TimeUnit::type TimestampType__unit(const std::shared_ptr<arrow::TimestampType>& type);
RcppExport SEXP _arrow_TimestampType__unit(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::TimestampType>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(TimestampType__unit(type));
    return rcpp_result_gen;
END_RCPP
}
// Object__pointer_address
std::string Object__pointer_address(SEXP obj);
RcppExport SEXP _arrow_Object__pointer_address(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(Object__pointer_address(obj));
    return rcpp_result_gen;
END_RCPP
}
// Field__initialize
std::shared_ptr<arrow::Field> Field__initialize(const std::string& name, const std::shared_ptr<arrow::DataType>& type, bool nullable);
RcppExport SEXP _arrow_Field__initialize(SEXP nameSEXP, SEXP typeSEXP, SEXP nullableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type nullable(nullableSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__initialize(name, type, nullable));
    return rcpp_result_gen;
END_RCPP
}
// Field__ToString
std::string Field__ToString(const std::shared_ptr<arrow::Field>& type);
RcppExport SEXP _arrow_Field__ToString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__ToString(type));
    return rcpp_result_gen;
END_RCPP
}
// Field__name
std::string Field__name(std::shared_ptr<arrow::Field> type);
RcppExport SEXP _arrow_Field__name(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::Field> >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__name(type));
    return rcpp_result_gen;
END_RCPP
}
// Field__nullable
bool Field__nullable(std::shared_ptr<arrow::Field> type);
RcppExport SEXP _arrow_Field__nullable(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::Field> >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Field__nullable(type));
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__default
std::shared_ptr<arrow::MemoryPool> MemoryPool__default();
RcppExport SEXP _arrow_MemoryPool__default() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(MemoryPool__default());
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__bytes_allocated
int MemoryPool__bytes_allocated(std::shared_ptr<arrow::MemoryPool> pool);
RcppExport SEXP _arrow_MemoryPool__bytes_allocated(SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::MemoryPool> >::type pool(poolSEXP);
    rcpp_result_gen = Rcpp::wrap(MemoryPool__bytes_allocated(pool));
    return rcpp_result_gen;
END_RCPP
}
// MemoryPool__max_memory
int MemoryPool__max_memory(std::shared_ptr<arrow::MemoryPool> pool);
RcppExport SEXP _arrow_MemoryPool__max_memory(SEXP poolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::MemoryPool> >::type pool(poolSEXP);
    rcpp_result_gen = Rcpp::wrap(MemoryPool__max_memory(pool));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__num_columns
int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_columns(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__num_columns(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__num_rows
int RecordBatch__num_rows(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__num_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__num_rows(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__schema
std::shared_ptr<arrow::Schema> RecordBatch__schema(const std::shared_ptr<arrow::RecordBatch>& x);
RcppExport SEXP _arrow_RecordBatch__schema(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__schema(x));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__column
std::shared_ptr<arrow::Array> RecordBatch__column(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__column(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__to_dataframe
List RecordBatch__to_dataframe(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__to_dataframe(SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__to_dataframe(batch));
    return rcpp_result_gen;
END_RCPP
}
// read_record_batch_
std::shared_ptr<arrow::RecordBatch> read_record_batch_(std::string path);
RcppExport SEXP _arrow_read_record_batch_(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_record_batch_(path));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__to_file
int RecordBatch__to_file(const std::shared_ptr<arrow::RecordBatch>& batch, std::string path);
RcppExport SEXP _arrow_RecordBatch__to_file(SEXP batchSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__to_file(batch, path));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__from_dataframe
std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(DataFrame tbl);
RcppExport SEXP _arrow_RecordBatch__from_dataframe(SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__from_dataframe(tbl));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Equals
bool RecordBatch__Equals(const std::shared_ptr<arrow::RecordBatch>& self, const std::shared_ptr<arrow::RecordBatch>& other);
RcppExport SEXP _arrow_RecordBatch__Equals(SEXP selfSEXP, SEXP otherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type other(otherSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Equals(self, other));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__RemoveColumn
std::shared_ptr<arrow::RecordBatch> RecordBatch__RemoveColumn(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__RemoveColumn(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__RemoveColumn(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__column_name
std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>& batch, int i);
RcppExport SEXP _arrow_RecordBatch__column_name(SEXP batchSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__column_name(batch, i));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__names
CharacterVector RecordBatch__names(const std::shared_ptr<arrow::RecordBatch>& batch);
RcppExport SEXP _arrow_RecordBatch__names(SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__names(batch));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Slice1
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(std::shared_ptr<arrow::RecordBatch>& self, int offset);
RcppExport SEXP _arrow_RecordBatch__Slice1(SEXP selfSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice1(self, offset));
    return rcpp_result_gen;
END_RCPP
}
// RecordBatch__Slice2
std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(std::shared_ptr<arrow::RecordBatch>& self, int offset, int length);
RcppExport SEXP _arrow_RecordBatch__Slice2(SEXP selfSEXP, SEXP offsetSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice2(self, offset, length));
    return rcpp_result_gen;
END_RCPP
}
// Table__from_dataframe
std::shared_ptr<arrow::Table> Table__from_dataframe(DataFrame tbl);
RcppExport SEXP _arrow_Table__from_dataframe(SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__from_dataframe(tbl));
    return rcpp_result_gen;
END_RCPP
}
// Table__num_columns
int Table__num_columns(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_columns(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__num_columns(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__num_rows
int Table__num_rows(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__num_rows(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__num_rows(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__schema
std::shared_ptr<arrow::Schema> Table__schema(const std::shared_ptr<arrow::Table>& x);
RcppExport SEXP _arrow_Table__schema(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__schema(x));
    return rcpp_result_gen;
END_RCPP
}
// Table__to_file
int Table__to_file(const std::shared_ptr<arrow::Table>& table, std::string path);
RcppExport SEXP _arrow_Table__to_file(SEXP tableSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__to_file(table, path));
    return rcpp_result_gen;
END_RCPP
}
// read_table_
std::shared_ptr<arrow::Table> read_table_(std::string path);
RcppExport SEXP _arrow_read_table_(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_table_(path));
    return rcpp_result_gen;
END_RCPP
}
// Table__to_dataframe
List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table);
RcppExport SEXP _arrow_Table__to_dataframe(SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__to_dataframe(table));
    return rcpp_result_gen;
END_RCPP
}
// Table__column
std::shared_ptr<arrow::Column> Table__column(const std::shared_ptr<arrow::Table>& table, int i);
RcppExport SEXP _arrow_Table__column(SEXP tableSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Table__column(table, i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_arrow_Array__from_vector", (DL_FUNC) &_arrow_Array__from_vector, 1},
    {"_arrow_Array__as_vector", (DL_FUNC) &_arrow_Array__as_vector, 1},
    {"_arrow_Array__Slice1", (DL_FUNC) &_arrow_Array__Slice1, 2},
    {"_arrow_Array__Slice2", (DL_FUNC) &_arrow_Array__Slice2, 3},
    {"_arrow_Array__IsNull", (DL_FUNC) &_arrow_Array__IsNull, 2},
    {"_arrow_Array__IsValid", (DL_FUNC) &_arrow_Array__IsValid, 2},
    {"_arrow_Array__length", (DL_FUNC) &_arrow_Array__length, 1},
    {"_arrow_Array__offset", (DL_FUNC) &_arrow_Array__offset, 1},
    {"_arrow_Array__null_count", (DL_FUNC) &_arrow_Array__null_count, 1},
    {"_arrow_Array__type", (DL_FUNC) &_arrow_Array__type, 1},
    {"_arrow_Array__ToString", (DL_FUNC) &_arrow_Array__ToString, 1},
    {"_arrow_Array__type_id", (DL_FUNC) &_arrow_Array__type_id, 1},
    {"_arrow_Array__Equals", (DL_FUNC) &_arrow_Array__Equals, 2},
    {"_arrow_Array__ApproxEquals", (DL_FUNC) &_arrow_Array__ApproxEquals, 2},
    {"_arrow_Array__data", (DL_FUNC) &_arrow_Array__data, 1},
    {"_arrow_Array__RangeEquals", (DL_FUNC) &_arrow_Array__RangeEquals, 5},
    {"_arrow_Array__Mask", (DL_FUNC) &_arrow_Array__Mask, 1},
    {"_arrow_ArrayData__get_type", (DL_FUNC) &_arrow_ArrayData__get_type, 1},
    {"_arrow_ArrayData__get_length", (DL_FUNC) &_arrow_ArrayData__get_length, 1},
    {"_arrow_ArrayData__get_null_count", (DL_FUNC) &_arrow_ArrayData__get_null_count, 1},
    {"_arrow_ArrayData__get_offset", (DL_FUNC) &_arrow_ArrayData__get_offset, 1},
    {"_arrow_ChunkedArray__length", (DL_FUNC) &_arrow_ChunkedArray__length, 1},
    {"_arrow_ChunkedArray__null_count", (DL_FUNC) &_arrow_ChunkedArray__null_count, 1},
    {"_arrow_ChunkedArray__num_chunks", (DL_FUNC) &_arrow_ChunkedArray__num_chunks, 1},
    {"_arrow_ChunkedArray__chunk", (DL_FUNC) &_arrow_ChunkedArray__chunk, 2},
    {"_arrow_ChunkedArray__chunks", (DL_FUNC) &_arrow_ChunkedArray__chunks, 1},
    {"_arrow_ChunkedArray__type", (DL_FUNC) &_arrow_ChunkedArray__type, 1},
    {"_arrow_ChunkedArray__as_vector", (DL_FUNC) &_arrow_ChunkedArray__as_vector, 1},
    {"_arrow_ChunkArray__Slice1", (DL_FUNC) &_arrow_ChunkArray__Slice1, 2},
    {"_arrow_ChunkArray__Slice2", (DL_FUNC) &_arrow_ChunkArray__Slice2, 3},
    {"_arrow_ChunkedArray__from_list", (DL_FUNC) &_arrow_ChunkedArray__from_list, 1},
    {"_arrow_Column__length", (DL_FUNC) &_arrow_Column__length, 1},
    {"_arrow_Column__null_count", (DL_FUNC) &_arrow_Column__null_count, 1},
    {"_arrow_Column__type", (DL_FUNC) &_arrow_Column__type, 1},
    {"_arrow_Column__data", (DL_FUNC) &_arrow_Column__data, 1},
    {"_arrow_Int8__initialize", (DL_FUNC) &_arrow_Int8__initialize, 0},
    {"_arrow_Int16__initialize", (DL_FUNC) &_arrow_Int16__initialize, 0},
    {"_arrow_Int32__initialize", (DL_FUNC) &_arrow_Int32__initialize, 0},
    {"_arrow_Int64__initialize", (DL_FUNC) &_arrow_Int64__initialize, 0},
    {"_arrow_UInt8__initialize", (DL_FUNC) &_arrow_UInt8__initialize, 0},
    {"_arrow_UInt16__initialize", (DL_FUNC) &_arrow_UInt16__initialize, 0},
    {"_arrow_UInt32__initialize", (DL_FUNC) &_arrow_UInt32__initialize, 0},
    {"_arrow_UInt64__initialize", (DL_FUNC) &_arrow_UInt64__initialize, 0},
    {"_arrow_Float16__initialize", (DL_FUNC) &_arrow_Float16__initialize, 0},
    {"_arrow_Float32__initialize", (DL_FUNC) &_arrow_Float32__initialize, 0},
    {"_arrow_Float64__initialize", (DL_FUNC) &_arrow_Float64__initialize, 0},
    {"_arrow_Boolean__initialize", (DL_FUNC) &_arrow_Boolean__initialize, 0},
    {"_arrow_Utf8__initialize", (DL_FUNC) &_arrow_Utf8__initialize, 0},
    {"_arrow_Date32__initialize", (DL_FUNC) &_arrow_Date32__initialize, 0},
    {"_arrow_Date64__initialize", (DL_FUNC) &_arrow_Date64__initialize, 0},
    {"_arrow_Null__initialize", (DL_FUNC) &_arrow_Null__initialize, 0},
    {"_arrow_Decimal128Type__initialize", (DL_FUNC) &_arrow_Decimal128Type__initialize, 2},
    {"_arrow_FixedSizeBinary__initialize", (DL_FUNC) &_arrow_FixedSizeBinary__initialize, 1},
    {"_arrow_Timestamp__initialize1", (DL_FUNC) &_arrow_Timestamp__initialize1, 1},
    {"_arrow_Timestamp__initialize2", (DL_FUNC) &_arrow_Timestamp__initialize2, 2},
    {"_arrow_Time32__initialize", (DL_FUNC) &_arrow_Time32__initialize, 1},
    {"_arrow_Time64__initialize", (DL_FUNC) &_arrow_Time64__initialize, 1},
    {"_arrow_list__", (DL_FUNC) &_arrow_list__, 1},
    {"_arrow_struct_", (DL_FUNC) &_arrow_struct_, 1},
    {"_arrow_DataType__ToString", (DL_FUNC) &_arrow_DataType__ToString, 1},
    {"_arrow_DataType__name", (DL_FUNC) &_arrow_DataType__name, 1},
    {"_arrow_DataType__Equals", (DL_FUNC) &_arrow_DataType__Equals, 2},
    {"_arrow_DataType__num_children", (DL_FUNC) &_arrow_DataType__num_children, 1},
    {"_arrow_DataType__children_pointer", (DL_FUNC) &_arrow_DataType__children_pointer, 1},
    {"_arrow_DataType__id", (DL_FUNC) &_arrow_DataType__id, 1},
    {"_arrow_schema_", (DL_FUNC) &_arrow_schema_, 1},
    {"_arrow_Schema__ToString", (DL_FUNC) &_arrow_Schema__ToString, 1},
    {"_arrow_ListType__ToString", (DL_FUNC) &_arrow_ListType__ToString, 1},
    {"_arrow_FixedWidthType__bit_width", (DL_FUNC) &_arrow_FixedWidthType__bit_width, 1},
    {"_arrow_DateType__unit", (DL_FUNC) &_arrow_DateType__unit, 1},
    {"_arrow_TimeType__unit", (DL_FUNC) &_arrow_TimeType__unit, 1},
    {"_arrow_DecimalType__precision", (DL_FUNC) &_arrow_DecimalType__precision, 1},
    {"_arrow_DecimalType__scale", (DL_FUNC) &_arrow_DecimalType__scale, 1},
    {"_arrow_TimestampType__timezone", (DL_FUNC) &_arrow_TimestampType__timezone, 1},
    {"_arrow_TimestampType__unit", (DL_FUNC) &_arrow_TimestampType__unit, 1},
    {"_arrow_Object__pointer_address", (DL_FUNC) &_arrow_Object__pointer_address, 1},
    {"_arrow_Field__initialize", (DL_FUNC) &_arrow_Field__initialize, 3},
    {"_arrow_Field__ToString", (DL_FUNC) &_arrow_Field__ToString, 1},
    {"_arrow_Field__name", (DL_FUNC) &_arrow_Field__name, 1},
    {"_arrow_Field__nullable", (DL_FUNC) &_arrow_Field__nullable, 1},
    {"_arrow_MemoryPool__default", (DL_FUNC) &_arrow_MemoryPool__default, 0},
    {"_arrow_MemoryPool__bytes_allocated", (DL_FUNC) &_arrow_MemoryPool__bytes_allocated, 1},
    {"_arrow_MemoryPool__max_memory", (DL_FUNC) &_arrow_MemoryPool__max_memory, 1},
    {"_arrow_RecordBatch__num_columns", (DL_FUNC) &_arrow_RecordBatch__num_columns, 1},
    {"_arrow_RecordBatch__num_rows", (DL_FUNC) &_arrow_RecordBatch__num_rows, 1},
    {"_arrow_RecordBatch__schema", (DL_FUNC) &_arrow_RecordBatch__schema, 1},
    {"_arrow_RecordBatch__column", (DL_FUNC) &_arrow_RecordBatch__column, 2},
    {"_arrow_RecordBatch__to_dataframe", (DL_FUNC) &_arrow_RecordBatch__to_dataframe, 1},
    {"_arrow_read_record_batch_", (DL_FUNC) &_arrow_read_record_batch_, 1},
    {"_arrow_RecordBatch__to_file", (DL_FUNC) &_arrow_RecordBatch__to_file, 2},
    {"_arrow_RecordBatch__from_dataframe", (DL_FUNC) &_arrow_RecordBatch__from_dataframe, 1},
    {"_arrow_RecordBatch__Equals", (DL_FUNC) &_arrow_RecordBatch__Equals, 2},
    {"_arrow_RecordBatch__RemoveColumn", (DL_FUNC) &_arrow_RecordBatch__RemoveColumn, 2},
    {"_arrow_RecordBatch__column_name", (DL_FUNC) &_arrow_RecordBatch__column_name, 2},
    {"_arrow_RecordBatch__names", (DL_FUNC) &_arrow_RecordBatch__names, 1},
    {"_arrow_RecordBatch__Slice1", (DL_FUNC) &_arrow_RecordBatch__Slice1, 2},
    {"_arrow_RecordBatch__Slice2", (DL_FUNC) &_arrow_RecordBatch__Slice2, 3},
    {"_arrow_Table__from_dataframe", (DL_FUNC) &_arrow_Table__from_dataframe, 1},
    {"_arrow_Table__num_columns", (DL_FUNC) &_arrow_Table__num_columns, 1},
    {"_arrow_Table__num_rows", (DL_FUNC) &_arrow_Table__num_rows, 1},
    {"_arrow_Table__schema", (DL_FUNC) &_arrow_Table__schema, 1},
    {"_arrow_Table__to_file", (DL_FUNC) &_arrow_Table__to_file, 2},
    {"_arrow_read_table_", (DL_FUNC) &_arrow_read_table_, 1},
    {"_arrow_Table__to_dataframe", (DL_FUNC) &_arrow_Table__to_dataframe, 1},
    {"_arrow_Table__column", (DL_FUNC) &_arrow_Table__column, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_arrow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
